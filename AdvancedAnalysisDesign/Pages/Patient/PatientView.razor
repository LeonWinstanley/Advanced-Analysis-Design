@page "/PatientView"
@using AdvancedAnalysisDesign.Models.Database
@using AdvancedAnalysisDesign.Models.Payloads
@using AdvancedAnalysisDesign.Services
@using InputType = MudBlazor.InputType

@using AdvancedAnalysisDesign.Enums
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@inject PatientService PatientService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="6">
            <MudPaper Elevation="5">

                @* Data table for Medication *@
                @if (medicationTableData.Any())@*if statement to check if medication is on the system. if not display a mudalert*@
                {
                    <MudTable Height="700px" FixedHeader="true" Items="medicationTableData" Hover="@hover" Breakpoint="Breakpoint.Sm">

                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Medication</MudText>
                        </ToolBarContent>

                        <HeaderContent>
                            <MudTh>Name</MudTh>
                        </HeaderContent>

                        <RowTemplate Context="row">
                            <MudTd DataLabel="Name">@row.Medication.MedicationName</MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudAlert Severity="Severity.Info">You currently have no medication on the system. If this is an error please contact example@example.com</MudAlert>
                }


            </MudPaper>
        </MudItem>

        <MudItem xs="6">
            <MudPaper Elevation="5">


                @* Data table for Bloodwork *@
                @if (bloodworkTableData.Any())@*if statement to check if bloodwork is on the system. if not display a mudalert*@
                {

                    <MudTable Height="700px" FixedHeader="true" Items="bloodworkTableData" Hover="@hover" Breakpoint="Breakpoint.Sm">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Bloodwork</MudText>
                        </ToolBarContent>

                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Date</MudTh>
                        </HeaderContent>

                        <RowTemplate Context="row">
                            <MudTd DataLabel="ID">@row.Id</MudTd>
                            <MudTd DataLabel="Date">@row.DateOfResults</MudTd>
                        </RowTemplate>
                    </MudTable>

                }
                else
                {
                    <MudAlert Severity="Severity.Info">You currently have no bloodwork on the system. If this is an error please contact example@example.com</MudAlert>
                }


            </MudPaper>
        </MudItem>
        @if (medicationTableData.Any())
        {
            <MudItem xs="6">
                <MudPaper Elevation="5">
                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex">
                                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" class="mr-3"></MudIcon>
                                <MudText Color="Color.Primary">Pickups</MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            @if (pickupTableData.Any())
                            {
                                <MudTable Height="700px" FixedHeader="true" Items="pickupTableData" Hover="@hover" Breakpoint="Breakpoint.Sm">
                                    <ToolBarContent>
                                        <MudText Typo="Typo.h6">Pickup</MudText>
                                    </ToolBarContent>

                                    <HeaderContent>
                                        <MudTh>Name</MudTh>
                                        <MudTh>Pickup Time</MudTh>
                                        <MudTh>Location</MudTh>
                                    </HeaderContent>

                                    <RowTemplate Context="row">
                                        <MudTd DataLabel="Name">@row.Medication.MedicationName</MudTd>
                                        <MudTd DataLabel="Pickup Time">@row.Pickup.DateScheduled</MudTd>
                                        <MudTd DataLabel="Pickup Time">@row.Pickup.MedicalInstitution</MudTd>
                                    </RowTemplate>
                                </MudTable>

                                <MudButton OnClick="@(() => NavigationManager.NavigateTo("/PickupView", true))" Variant="Variant.Filled" Color="Color.Primary">Schedule</MudButton>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info">You currently have no medication to pickup. If this is an error please contact your pharmacy</MudAlert>
                            }
                        </ChildContent>
                    </MudExpansionPanel>
                </MudPaper>
            </MudItem>
        }
        <MudItem xs="6"></MudItem>
    </MudGrid>
</MudContainer>

@code{
    private bool hover = true;
    private bool schedule = false;

    private Patient PatientmedicationData = new Patient();
    private PatientMedication PatientbloodworkData = new PatientMedication();

    private List<PatientMedication> medicationTableData = new List<PatientMedication>();
    private List<PatientBloodwork> bloodworkTableData = new List<PatientBloodwork>();
    private List<PatientMedication> pickupTableData = new List<PatientMedication>();
    private List<PickupSchedulerPayload> AvailableTimes = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole(Role.Patient.ToString()) || user.IsInRole(Role.Admin.ToString()))
        {
            PatientmedicationData = await PatientService.FetchUserMedication();

            //Create medication and bloodwork data if any available
            if (PatientmedicationData.Medications.Any())
            {

                medicationTableData = PatientmedicationData.Medications;

                //Generate bloodwork data from user medication
                foreach (PatientMedication Med in medicationTableData)
                {

                    int MedId = Med.Id;
                    PatientbloodworkData = await PatientService.FetchUserBloodwork(MedId);

                    foreach (PatientBloodwork blood in PatientbloodworkData.PatientBloodworks)
                    {
                        bloodworkTableData.Add(blood);
                    }
                }

                //generate pickup data from user medication
                foreach (PatientMedication Med in medicationTableData)
                {
                    if (Med.BloodworkRequired == true && Med.Pickup.IsPickedUp == false)
                    {
                        pickupTableData.Add(Med);
                    }
                }
            }

        }
        else
        {
            NavigationManager.NavigateTo("/", true);
        }
    }


}
