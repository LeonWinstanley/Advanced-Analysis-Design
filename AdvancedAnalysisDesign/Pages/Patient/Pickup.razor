@page "/Pickup"
@using AdvancedAnalysisDesign.Models.Database
@using AdvancedAnalysisDesign.Services
@using InputType = MudBlazor.InputType

@using AdvancedAnalysisDesign.Enums
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@inject PatientService PatientService
@inject NonPatientService NonPatientService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudGrid Justify="Justify.Center" Class="mt-16">
        <MudItem xs="4"></MudItem>
        <MudItem xs="4"></MudItem>
        <MudItem xs="4">
            <MudAutocomplete Align="right" T="string" Label="Pharmacies" @bind-Value="pharmacy" SearchFunc="@Search" ResetValueOnEmptyText="true" CoerceText="true" />
        </MudItem>
        <MudItem xs="4"></MudItem>
        <MudItem xs="4"></MudItem>
        <MudItem xs="4">
            <MudAutocomplete Align="right" T="string" Label="Medicine" @bind-Value="medicine" SearchFunc="@Search" ResetValueOnEmptyText="true" CoerceText="true" />
        </MudItem>
        <MudItem xs="6">
            @if (AvailableTimes.Any())
            {
                <MudTable Height="700px" FixedHeader="true" Items="AvailableTimes" Hover="@hover" Breakpoint="Breakpoint.Sm">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Time Slots</MudText>
                    </ToolBarContent>

                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Pickup Time</MudTh>
                    </HeaderContent>

                    <RowTemplate Context="row">
                        <MudTd DataLabel="Name"></MudTd>
                        <MudTd DataLabel="Name"></MudTd>
                    </RowTemplate>
                </MudTable>


            }
            else
            {
                <MudAlert Severity="Severity.Info">There are no time slots available. Please contact your Pharmacy.</MudAlert>
            }
        </MudItem>
    </MudGrid>
    
</MudContainer>

@code{

    private string pharmacy;
    private string medicine;

    private bool hover = true;
    private bool schedule = false;

    private DateTime currentdatetime;
    private List<DateTime> AvailableTimes = new List<DateTime>();

    private Patient PatientmedicationData = new Patient();
    private PatientMedication PatientbloodworkData = new PatientMedication();

    private List<PatientMedication> medicationTableData = new List<PatientMedication>();
    private List<PatientBloodwork> bloodworkTableData = new List<PatientBloodwork>();
    private List<PatientMedication> pickupTableData = new List<PatientMedication>();

    private List<MedicalInstitution> Pharms = new List<MedicalInstitution>();
    private List<string> Institutions = new List<string>();
    //private string[] Institutions;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole(Role.Patient.ToString()) || user.IsInRole(Role.Admin.ToString()))
        {

        }
        else
        {
            NavigationManager.NavigateTo("/", true);
        }
    }

    private async Task<IEnumerable<string>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        Pharms = await NonPatientService.GetMedicalInstitutions();

        // if text is null or empty, show complete list
        foreach (MedicalInstitution val in Pharms)
        {
            Institutions.Add(val.Name);
        }
        if (string.IsNullOrEmpty(value))
            return Institutions;
        return Institutions.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
