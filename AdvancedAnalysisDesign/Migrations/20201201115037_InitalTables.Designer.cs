// <auto-generated />
using System;
using AdvancedAnalysisDesign.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdvancedAnalysisDesign.Migrations
{
    [DbContext(typeof(AADContext))]
    [Migration("20201201115037_InitalTables")]
    partial class InitalTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.Bloodwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("DateOfResults")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Bloodworks");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.BloodworkTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BloodworkTest")
                        .HasColumnType("int");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("DateOfTest")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("RequiresPrescription")
                        .HasColumnType("bit");

                    b.Property<string>("Results")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BloodworkTest");

                    b.ToTable("BloodworkTests");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("NhsNumber")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.PatientPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("PatientPrescription")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientPrescription");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PatientPrescriptions");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BloodworkId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BloodworkId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.UserDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.BloodworkTest", b =>
                {
                    b.HasOne("AdvancedAnalysisDesign.Models.Bloodwork", null)
                        .WithMany("BloodworkTestIds")
                        .HasForeignKey("BloodworkTest");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.PatientPrescription", b =>
                {
                    b.HasOne("AdvancedAnalysisDesign.Models.Patient", "Patient")
                        .WithMany("PrescriptionIds")
                        .HasForeignKey("PatientPrescription");

                    b.HasOne("AdvancedAnalysisDesign.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId");

                    b.Navigation("Patient");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.Prescription", b =>
                {
                    b.HasOne("AdvancedAnalysisDesign.Models.Bloodwork", "Bloodwork")
                        .WithMany()
                        .HasForeignKey("BloodworkId");

                    b.Navigation("Bloodwork");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.User", b =>
                {
                    b.HasOne("AdvancedAnalysisDesign.Models.UserDetail", "UserDetail")
                        .WithMany()
                        .HasForeignKey("UserDetailId");

                    b.HasOne("AdvancedAnalysisDesign.Models.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId");

                    b.Navigation("UserDetail");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.Bloodwork", b =>
                {
                    b.Navigation("BloodworkTestIds");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.Patient", b =>
                {
                    b.Navigation("PrescriptionIds");
                });
#pragma warning restore 612, 618
        }
    }
}
