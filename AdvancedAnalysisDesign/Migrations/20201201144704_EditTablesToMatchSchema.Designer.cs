// <auto-generated />
using System;
using AdvancedAnalysisDesign;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdvancedAnalysisDesign.Migrations
{
    [DbContext(typeof(AADContext))]
    [Migration("20201201144704_EditTablesToMatchSchema")]
    partial class EditTablesToMatchSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.Bloodwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("DateOfResults")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("PatientMedicationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientMedicationId");

                    b.ToTable("Bloodworks");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.BloodworkTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BloodworkId")
                        .HasColumnType("int");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("DateOfTest")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Results")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BloodworkId");

                    b.ToTable("BloodworkTests");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("BloodworkRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("NhsNumber")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("VerificationImage")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.PatientMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMedications");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserDetailId")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.UserDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.Bloodwork", b =>
                {
                    b.HasOne("AdvancedAnalysisDesign.Models.PatientMedication", null)
                        .WithMany("Bloodworks")
                        .HasForeignKey("PatientMedicationId");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.BloodworkTest", b =>
                {
                    b.HasOne("AdvancedAnalysisDesign.Models.Bloodwork", null)
                        .WithMany("BloodworkTestIds")
                        .HasForeignKey("BloodworkId");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.PatientMedication", b =>
                {
                    b.HasOne("AdvancedAnalysisDesign.Models.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId");

                    b.HasOne("AdvancedAnalysisDesign.Models.Patient", "Patient")
                        .WithMany("Medications")
                        .HasForeignKey("PatientId");

                    b.Navigation("Medication");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.User", b =>
                {
                    b.HasOne("AdvancedAnalysisDesign.Models.UserDetail", "UserDetail")
                        .WithMany()
                        .HasForeignKey("UserDetailId");

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.Bloodwork", b =>
                {
                    b.Navigation("BloodworkTestIds");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.Patient", b =>
                {
                    b.Navigation("Medications");
                });

            modelBuilder.Entity("AdvancedAnalysisDesign.Models.PatientMedication", b =>
                {
                    b.Navigation("Bloodworks");
                });
#pragma warning restore 612, 618
        }
    }
}
